
#ifndef STD_EXPERIMENTAL_EXECUTION_HPP_P1054
#define STD_EXPERIMENTAL_EXECUTION_HPP_P1054

#include <__p0443/experimental/execution>

#include <utility> // std::pair

namespace std::experimental {
inline namespace executors_v1 {
namespace execution {


// P1054r0, section 2.2:
// ------------------------------

struct exception_arg_t { explicit exception_arg_t() = default; };

inline constexpr exception_arg_t exception_arg{};

template <typename F, typename T>
  struct is_future_value_continuation;

template <typename F, typename T>
  inline constexpr bool is_future_value_continuation_v
    = is_future_value_continuation<F, T>::value;

template <typename F>
  struct is_future_exception_continuation;

template <typename F>
  inline constexpr bool is_future_exception_continuation_v
    = is_future_exception_continuation<F>::value;

template <typename F, typename T>
  struct is_future_continuation;

template <typename F, typename T>
  inline constexpr bool is_future_continuation_v
    = is_future_continuation<F, T>::value;


// Implicit (missing in paper):
// ------------------------------

template <class Future>
  struct future_value;

template <class Future>
  using future_value_t = typename future_value<Future>::type;


// P1054r0, Section 2.3.1:
// ------------------------------

template <class T>
  struct promise_contract_t;

template <typename T>
  inline constexpr promise_contract = promise_contract_t<T>{};


// P1054r0, section 2.7:
// ------------------------------

template <class T>
  class promise;


// P1054r0, section 2.8:
// ------------------------------

template <class T>
  class semi_future;


// P1054r0, section 2.9:
// ------------------------------

template <class T, class E>
  class continuable_future;


// P1054r0, section 2.10:
// ------------------------------

template <class T, class E>
  class shared_future;


// P1054r0, section 2.12:
// ------------------------------

namespace this_thread {

template<class Future>
  void future_wait(Future& f) noexcept;

template<class Future>
  future_value_t<decay_t<Future>> future_get(Future&& f);

} // end namespace this_thread


// P1054r0, section 2.13:
// ------------------------------

template <class F>
  auto on_value(F&& f);

template<class F>
  auto on_error(F&& f);

template<class F, class G>
  auto on_value_or_error(F&& f, G&& g);


// Excluded from P0443 implementation for some reason:
// ------------------------------

struct then_t;

template<class Executor>
  struct is_then_executor;

template<class Executor>
  inline constexpr bool is_then_executor_v
    = is_then_executor<Executor>::value;


} // end namespace execution
} // end inline namespace executors_v1
} // end namespace std::execution

#include "bits/standard_future.hpp"

#endif //STD_EXPERIMENTAL_EXECUTION_HPP_P1054
